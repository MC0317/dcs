DROP VIEW IF EXISTS UserLogin; 
DROP VIEW IF EXISTS CardsProduced; 
DROP VIEW IF EXISTS PendingCards; 
DROP VIEW IF EXISTS PrinterList; 
DROP VIEW IF EXISTS StatusPrinter; 

DROP TABLE IF EXISTS KMS;
CREATE TABLE KMS
(
	NAME varchar(20) NOT NULL,
	OWNER varchar(20) NOT NULL,
	VERSION varchar(20) NOT NULL,
	VALUE varchar(100) NOT NULL,
	KCV varchar(20)
);

INSERT INTO KMS (NAME, OWNER, VERSION, VALUE, KCV) VALUES ('DCAP','432112','01', '404142434445464748494A4B4C4D4E4F','112233');
INSERT INTO KMS (NAME, OWNER, VERSION, VALUE, KCV) VALUES ('KEK','622512','01', 'F35FE555E7F86476AF6338F0CFD2B9AC','1DCC2B');
INSERT INTO KMS (NAME, OWNER, VERSION, VALUE, KCV) VALUES ('KMC','622512','01', '77AF2B236DFBA24A8DB5FA2BB2BD14B3','8BAF47');
INSERT INTO KMS (NAME, OWNER, VERSION, VALUE, KCV) VALUES ('KEK','622538','01', '0123456789ABCDEF1111111111111111','112233');
INSERT INTO KMS (NAME, OWNER, VERSION, VALUE, KCV) VALUES ('KMC','622538','01', '47454D5850524553534F53414D504C45','112233');

DROP TABLE IF EXISTS ADP_SCHEMA_VERSION;
CREATE TABLE ADP_SCHEMA_VERSION
(
	VERSION INT PRIMARY KEY
);

/* Each XML has one JAVACLASS and one PROFILES ---  MANDATORY
 * Each APP XML has REFPROFILES - key xml, adt xml	--- OPTIONAL
 * Each GP APP function has one SCRIPTS	--- OPTIONAL
 * APIM / APOM has SCRIPTMAPPINGS	--- OPTIONAL
 */

DROP TABLE IF EXISTS JAVACLASS;
CREATE TABLE JAVACLASS
(
	OID VARCHAR(255),
	CLASSNAME VARCHAR(300) PRIMARY KEY,
	SOURCE TEXT,
	BYTECODE IMAGE
);

DROP TABLE IF EXISTS PROFILES;
CREATE TABLE PROFILES(
	OID VARCHAR(255) PRIMARY KEY,
	SCHEMAID INT NOT NULL,
	ALIAS VARCHAR(255) NOT NULL,
	PROFILETYPE TINYINT NOT NULL,
	DESCRIPTION VARCHAR(1024) NOT NULL,
	XML VARCHAR(MAX) NOT NULL,
	SOURCECODE VARCHAR(MAX) NOT NULL,
	BYTECODE VARBINARY(MAX) NOT NULL
);

DROP TABLE IF EXISTS SCHEMAS;
CREATE TABLE SCHEMAS(
	SCHEMAID INT IDENTITY(1,1) PRIMARY KEY,
	SCHEMANAME VARCHAR(MAX) NOT NULL,
	SCHEMACONTENT VARCHAR(MAX) NOT NULL
);


INSERT INTO schemas (schemaid, schemaname, schemacontent) VALUES (24, N'GP.systems.profiles.1.1.0.Common.xsd', N'<?xml version="1.0" encoding="UTF-8"?><xsd:schema targetNamespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:gp="http://namespaces.globalplatform.org/systems-profiles/1.1.0" elementFormDefault="qualified" attributeFormDefault="unqualified">	<xsd:element name="ConflictRule">		<xsd:annotation>			<xsd:documentation>General conflict rule representation.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Source" type="xsd:string" use="required"/>			<xsd:attribute name="Target" type="xsd:string" use="required"/>			<xsd:attribute name="Rule" type="gp:rule" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="ConflictRules">		<xsd:annotation>			<xsd:documentation>Contains the rules which the profile must satisfy before being utilized.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:ConflictRule" minOccurs="0" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Description" type="xsd:string">		<xsd:annotation>			<xsd:documentation>General freeform container for description text fields.</xsd:documentation>		</xsd:annotation>	</xsd:element>	<xsd:element name="Privileges">		<xsd:annotation>			<xsd:documentation>GlobalPlatform standard application privileges.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="SecurityDomain" type="xsd:boolean"/>			<xsd:attribute name="DAPVerification" type="xsd:boolean"/>			<xsd:attribute name="DelegatedManagement" type="xsd:boolean"/>			<xsd:attribute name="CardManagerLock" type="xsd:boolean"/>			<xsd:attribute name="CardTerminate" type="xsd:boolean"/>			<xsd:attribute name="DefaultSelected" type="xsd:boolean"/>			<xsd:attribute name="CVMChange" type="xsd:boolean"/>			<xsd:attribute name="ManadatedDAPVerification" type="xsd:boolean"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Revision">		<xsd:annotation>			<xsd:documentation>Specific revision information.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Description" minOccurs="0"/>				<xsd:element ref="gp:Signature" minOccurs="0"/>			</xsd:sequence>			<xsd:attribute name="ProfileID" type="gp:uniqueID"/>			<xsd:attribute name="Version" type="gp:version" use="required"/>			<xsd:attribute name="Date" type="xsd:date" use="required"/>			<xsd:attribute name="Time" type="xsd:time" use="required"/>			<xsd:attribute name="By" type="xsd:string" use="required"/>			<xsd:attribute name="Digest" type="xsd:hexBinary" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Revisions">		<xsd:annotation>			<xsd:documentation>Container for a list of revision notices.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Revision" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Signature">		<xsd:annotation>			<xsd:documentation>Signature for profile authentication purposes.</xsd:documentation>		</xsd:annotation>		<xsd:complexType/>	</xsd:element>	<xsd:simpleType name="version">		<xsd:annotation>			<xsd:documentation>GlobalPlatform specification version adhered to.  The scripting version must always match the profile version.</xsd:documentation>		</xsd:annotation>		<xsd:restriction base="xsd:string">			<xsd:pattern value="\d\.\d\.\d"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="valueFormat">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="CRT"/>			<xsd:enumeration value="MOD_EXP"/>			<xsd:enumeration value="DES"/>			<xsd:enumeration value="NONE"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="kcvalgorithmtype">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="EIGHTZEROS"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="keypartalgorithm">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="XOR"/>			<xsd:enumeration value="CONCATE"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="keytype">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="SECRET"/>			<xsd:enumeration value="PRIVATE"/>			<xsd:enumeration value="PUBLIC"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="keysubtype">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="DES"/>			<xsd:enumeration value="RSA"/>			<xsd:enumeration value="RSACRT"/>			<xsd:enumeration value="EC"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="tkalgorithm">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="CBC"/>			<xsd:enumeration value="ECB"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="mode">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="TEST"/>			<xsd:enumeration value="PRODUCTION"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="componentName">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="CRT_P"/>			<xsd:enumeration value="CRT_Q"/>			<xsd:enumeration value="CRT_DP1"/>			<xsd:enumeration value="CRT_DQ1"/>			<xsd:enumeration value="CRT_PQ"/>			<xsd:enumeration value="MODULUS"/>			<xsd:enumeration value="EXPONENT"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="protocol">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="T0"/>			<xsd:enumeration value="T1"/>			<xsd:enumeration value="T14"/>			<xsd:enumeration value="TYPEA"/>			<xsd:enumeration value="TYPEB"/>			<xsd:enumeration value="OTHER"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="algorithm">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="DES"/>			<xsd:enumeration value="3DES_3KEY"/>			<xsd:enumeration value="3DES_2KEY"/>			<xsd:enumeration value="DESX"/>			<xsd:enumeration value="RSA"/>			<xsd:enumeration value="DSA"/>			<xsd:enumeration value="OTHER"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="algoMode">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="ECB"/>			<xsd:enumeration value="ECB_PAD"/>			<xsd:enumeration value="CBC"/>			<xsd:enumeration value="CBC_IV8"/>			<xsd:enumeration value="PUBLIC_KEY"/>			<xsd:enumeration value="PRIVATE_KEY"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="lengthType">		<xsd:restriction base="xsd:NMTOKENS">			<xsd:enumeration value="FIX"/>			<xsd:enumeration value="VAR"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="application">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="GP"/>			<xsd:enumeration value="MULTOS"/>			<xsd:enumeration value="W4SC"/>			<xsd:enumeration value="OTHER"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="applicationsubtype">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="CM"/>			<xsd:enumeration value="SD"/>			<xsd:enumeration value="APP"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="encoding">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="HEX"/>			<xsd:enumeration value="ASCII"/>			<xsd:enumeration value="BASE64"/>			<xsd:enumeration value="UTF8"/>			<xsd:enumeration value="CN"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="dataType">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="ByteString"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="secureChannel">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="NONE"/>			<xsd:enumeration value="SCP01"/>			<xsd:enumeration value="SCP02"/>			<xsd:enumeration value="OTHER"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="securityLevel">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="C_MAC_R_MAC_C_DECRYPTION"/>			<xsd:enumeration value="C_MAC_R_MAC"/>			<xsd:enumeration value="C_MAC"/>			<xsd:enumeration value="C_MAC_C_DECRYPTION"/>			<xsd:enumeration value="R_MAC"/>			<xsd:enumeration value="NO_SECURE_MESSAGING"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="rule">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="=="/>			<xsd:enumeration value="!="/>			<xsd:enumeration value="&gt;"/>			<xsd:enumeration value="&lt;"/>			<xsd:enumeration value="&gt;="/>			<xsd:enumeration value="&lt;="/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="tagEncoding">		<xsd:restriction base="xsd:string">			<xsd:enumeration value="DGI"/>			<xsd:enumeration value="EMV"/>			<xsd:enumeration value="L16"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="indexList" final="list">		<xsd:annotation>			<xsd:documentation>A list of index references</xsd:documentation>		</xsd:annotation>		<xsd:list itemType="gp:indexRef"/>	</xsd:simpleType>	<xsd:simpleType name="indexRef" final="union">		<xsd:annotation>			<xsd:documentation>An index reference: an attribute name or #</xsd:documentation>		</xsd:annotation>		<xsd:union memberTypes="gp:numberSign xsd:NCName"/>	</xsd:simpleType>	<xsd:simpleType name="numberSign" final="restriction">		<xsd:annotation>			<xsd:documentation>The # sign</xsd:documentation>		</xsd:annotation>		<xsd:restriction base="xsd:string">			<xsd:enumeration value="#"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="arrayList" final="list">		<xsd:annotation>			<xsd:documentation>A list of array element names</xsd:documentation>		</xsd:annotation>		<xsd:list itemType="xsd:NCName"/>	</xsd:simpleType>	<xsd:simpleType name="uniqueID">		<xsd:restriction base="xsd:hexBinary"/>	</xsd:simpleType></xsd:schema>');
INSERT INTO schemas (schemaid, schemaname, schemacontent) VALUES (25, N'GP.systems.profiles.1.1.0.ApplicationProfile.xsd', N'<?xml version="1.0" encoding="UTF-8"?> <xsd:schema targetNamespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:gp="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified"> 	<xsd:include schemaLocation="GP.systems.profiles.1.1.0.Common.xsd"/> 	<xsd:element name="ApplicationInfo"> 		<xsd:annotation> 			<xsd:documentation>Contains all the general information about the application.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:Privileges"/> 				<xsd:element ref="gp:LifeCycles"/> 				<xsd:element ref="gp:Codes" minOccurs="0" maxOccurs="1"/> 			</xsd:sequence> 			<xsd:attribute name="Version" type="gp:version" use="required"/> 			<xsd:attribute name="Type" type="gp:application" use="required"/> 			<xsd:attribute name="Subtype" type="gp:applicationsubtype" use="required"/> 			<xsd:attribute name="Owner" type="xsd:string" use="required"/> 			<xsd:attribute name="Developer" type="xsd:string" use="required"/> 			<xsd:attribute name="Provider" type="xsd:string" use="required"/> 			<xsd:attribute name="Domain" type="xsd:string" use="required"/> 			<xsd:attribute name="VolatileDataSpaceMin" type="xsd:integer" use="required"/> 			<xsd:attribute name="NonVolatileDataSpaceMin" type="xsd:integer" use="required"/> 			<xsd:attribute name="VolatileDataSpaceMax" type="xsd:integer"/> 			<xsd:attribute name="NonVolatileDataSpaceMax" type="xsd:integer"/> 			<xsd:attribute name="AppSpecificInstallParams" type="xsd:hexBinary"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="ApplicationProfile"> 		<xsd:annotation> 			<xsd:documentation>The parent or root element of an Application Profile.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:Description" minOccurs="0"/> 				<xsd:element ref="gp:Revisions"/> 				<xsd:element ref="gp:ConflictRules"/> 				<xsd:element ref="gp:ApplicationInfo"/> 				<xsd:element ref="gp:Key" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:DataElement" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:Function" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:SecureChannel" minOccurs="0"/> 				<xsd:element ref="gp:ScriptFragment" minOccurs="0" maxOccurs="unbounded"/> 			</xsd:sequence> 			<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/> 			<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/> 			<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="CloseSecureChannel"> 		<xsd:annotation> 			<xsd:documentation>Script for closing a secure channel when the application is a Security Domain.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:KeyDeclaration" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:Script"/> 			</xsd:sequence> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="Code"> 		<xsd:annotation> 			<xsd:documentation>Refers to the Load File and Module within this Load File which contains the applet code for the application.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:attribute name="ProfileID" type="gp:uniqueID" use="required"/> 			<xsd:attribute name="ModuleID" type="xsd:integer" use="required"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="Codes"> 		<xsd:annotation> 			<xsd:documentation>Describes the different load files where the applet code for the application can be found.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:Code" minOccurs="0" maxOccurs="unbounded"/> 			</xsd:sequence> 			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/> 			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="DataElement"> 		<xsd:annotation> 			<xsd:documentation>Externally provided parameters and data used by the scripts defined for this application.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:attribute name="Name" type="xsd:string" use="required"/> 			<xsd:attribute name="Label" type="xsd:string" use="optional"/> 			<xsd:attribute name="External" type="xsd:boolean" use="required"/> 			<xsd:attribute name="Type" type="gp:dataType" use="required"/> 			<xsd:attribute name="Encoding" type="gp:encoding" use="optional"/> 			<xsd:attribute name="FixedLength" type="xsd:boolean"/> 			<xsd:attribute name="Length" type="xsd:integer"/> 			<xsd:attribute name="Value" type="xsd:string"/> 			<xsd:attribute name="Tag" type="xsd:hexBinary"/> 			<xsd:attribute name="TagEncoding" type="gp:tagEncoding"/> 			<xsd:attribute name="ReadWrite" type="xsd:boolean"/> 			<xsd:attribute name="Update" type="xsd:boolean"/> 			<xsd:attribute name="Optional" type="xsd:boolean"/> 			<xsd:attribute name="MandatoryAudit" type="xsd:boolean"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="Declaration"> 		<xsd:annotation> 			<xsd:documentation>Minimum required parameters and data for the specific script fragment.  Also, provides a mechanism for overriding the default characteristics of the data element.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:attribute name="Name" type="xsd:string" use="required"/> 			<xsd:attribute name="External" type="xsd:boolean" use="required"/> 			<xsd:attribute name="Encoding" type="xsd:string"/> 			<xsd:attribute name="Value" type="xsd:string"/> 			<xsd:attribute name="ReadWrite" type="xsd:boolean"/> 			<xsd:attribute name="Update" type="xsd:string"/> 			<xsd:attribute name="Optional" type="xsd:boolean"/> 			<xsd:attribute name="MandatoryAudit" type="xsd:boolean"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="Function"> 		<xsd:annotation> 			<xsd:documentation>Application defined script functions which will be used by the script fragments.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:Description" minOccurs="0"/> 				<xsd:element ref="gp:Script"/> 			</xsd:sequence> 			<xsd:attribute name="Name" type="xsd:string" use="required"/> 			<xsd:attribute name="Param" type="xsd:string" use="required"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="Key"> 		<xsd:annotation> 			<xsd:documentation>Specific key definition inheriting features of a specified Key Profile.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:attribute name="Name" type="xsd:string" use="required"/> 			<xsd:attribute name="ProfileID" type="gp:uniqueID" use="required"/> 			<xsd:attribute name="External" type="xsd:boolean" use="required"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="KeyDeclaration"> 		<xsd:annotation> 			<xsd:documentation>Information concerning where a key comes from for a particular script</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:attribute name="Name" type="xsd:string" use="required"/> 			<xsd:attribute name="External" type="xsd:boolean" use="required"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="LifeCycle"> 		<xsd:annotation> 			<xsd:documentation>Specific lifecycle information.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:attribute name="Name" type="xsd:string" use="required"/> 			<xsd:attribute name="Value" type="xsd:hexBinary"/> 			<xsd:attribute name="Label" type="xsd:string"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="LifeCycles"> 		<xsd:annotation> 			<xsd:documentation>The supported lifecycle states.  Will include at a minimum the GlobalPlatform standard application lifecycle states.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:LifeCycle" minOccurs="3" maxOccurs="unbounded"/> 			</xsd:sequence> 			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/> 			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="OpenSecureChannel"> 		<xsd:annotation> 			<xsd:documentation>Script for opening a secure channel when the application is a Security Domain.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:KeyDeclaration" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:Script"/> 			</xsd:sequence> 			<xsd:attribute name="Param" type="xsd:string" use="required"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="Script"> 		<xsd:annotation> 			<xsd:documentation>GlobalPlatform script code.</xsd:documentation> 		</xsd:annotation> 	</xsd:element> 	<xsd:element name="ScriptFragment"> 		<xsd:annotation> 			<xsd:documentation>Script fragment for one particular stage in the card customization process.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:Description" minOccurs="0"/> 				<xsd:element ref="gp:ConflictRules" minOccurs="0"/> 				<xsd:element ref="gp:Declaration" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:KeyDeclaration" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:Script"/> 			</xsd:sequence> 			<xsd:attribute name="Name" type="xsd:string" use="required"/> 			<xsd:attribute name="StartLifeCycle" type="xsd:string" use="required"> 				<xsd:annotation> 					<xsd:documentation>Life cycle required to run this script</xsd:documentation> 				</xsd:annotation> 			</xsd:attribute> 			<xsd:attribute name="EndLifeCycle" type="xsd:string" use="required"> 				<xsd:annotation> 					<xsd:documentation>New life cycle if no execution errors</xsd:documentation> 				</xsd:annotation> 			</xsd:attribute> 			<xsd:attribute name="SecureChannel" type="gp:secureChannel" use="optional"/> 			<xsd:attribute name="SecurityLevel" type="gp:securityLevel" use="optional"/> 			<xsd:attribute name="Active" type="xsd:boolean"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="SecureChannel"> 		<xsd:annotation> 			<xsd:documentation>Valid only if the application is a Security Domain.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:OpenSecureChannel" minOccurs="0"/> 				<xsd:element ref="gp:CloseSecureChannel" minOccurs="0"/> 				<xsd:element ref="gp:Wrap" minOccurs="0"/> 			</xsd:sequence> 			<xsd:attribute name="SecureChannel" type="gp:secureChannel" use="required"/> 			<xsd:attribute name="Option" type="xsd:hexBinary" use="optional"/> 			<xsd:attribute name="SecurityLevel" type="gp:securityLevel" use="optional"/> 		</xsd:complexType> 	</xsd:element> 	<xsd:element name="Wrap"> 		<xsd:annotation> 			<xsd:documentation>Script for wrapping APDUs when the application is a Security Domain (or equivalent) for a general application.</xsd:documentation> 		</xsd:annotation> 		<xsd:complexType> 			<xsd:sequence> 				<xsd:element ref="gp:KeyDeclaration" minOccurs="0" maxOccurs="unbounded"/> 				<xsd:element ref="gp:Script"/> 			</xsd:sequence> 			<xsd:attribute name="Param" type="xsd:string" use="required"/> 		</xsd:complexType> 	</xsd:element> </xsd:schema>');
INSERT INTO schemas (schemaid, schemaname, schemacontent) VALUES (26, N'GP.systems.profiles.1.1.0.CardProfile.xsd', N'<?xml version="1.0" encoding="UTF-8"?><xsd:schema targetNamespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:gp="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">	<xsd:include schemaLocation="GP.systems.profiles.1.1.0.Common.xsd"/>	<xsd:element name="Algorithm">		<xsd:annotation>			<xsd:documentation>Cryptographic functionality.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Name" type="xsd:string" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="ApplicationInstance">		<xsd:annotation>			<xsd:documentation>Information about an application which is present on the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Privileges" minOccurs="0"/>			</xsd:sequence>			<xsd:attribute name="ProfileID" type="gp:uniqueID" use="required"/>			<xsd:attribute name="Label" type="xsd:string"/>			<xsd:attribute name="AID" type="xsd:hexBinary" use="required"/>			<xsd:attribute name="LifeCycle" type="xsd:string" use="required"/>			<xsd:attribute name="SecurityDomain" type="xsd:hexBinary"/>			<xsd:attribute name="VolatileDataSpaceLimit" type="xsd:integer"/>			<xsd:attribute name="NonVolatileDataSpaceLimit" type="xsd:integer"/>			<xsd:attribute name="AppSpecificInstallParams" type="xsd:hexBinary"/>			<xsd:attribute name="Order" type="xsd:integer"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="ApplicationInstances">		<xsd:annotation>			<xsd:documentation>Container for all the applications which are present on the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:ApplicationInstance" minOccurs="0" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="CardInfo">		<xsd:annotation>			<xsd:documentation>Contains information about the smart card resources and application specific fields used to manage the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:ResourcesAvailable"/>			</xsd:sequence>		</xsd:complexType>	</xsd:element>	<xsd:element name="CardManufacturer">		<xsd:annotation>			<xsd:documentation>Information about the manufacturer of the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Name" type="xsd:string" use="required"/>			<xsd:attribute name="PlasticStockID" type="xsd:string"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="CardManufacturerProduct">		<xsd:annotation>			<xsd:documentation>Characteristics of the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Description" minOccurs="0"/>				<xsd:element ref="gp:CardManufacturer"/>				<xsd:element ref="gp:Chip"/>				<xsd:element ref="gp:Platform"/>			</xsd:sequence>			<xsd:attribute name="Name" type="xsd:string" use="required"/>			<xsd:attribute name="Version" type="gp:version" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="CardProfile">		<xsd:annotation>			<xsd:documentation>Contains all the manufacturer provided information about the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Description" minOccurs="0"/>				<xsd:element ref="gp:Revisions"/>				<xsd:element ref="gp:CardManufacturerProduct"/>				<xsd:element ref="gp:ConflictRules"/>				<xsd:element ref="gp:LoadFileInstances"/>				<xsd:element ref="gp:ApplicationInstances"/>				<xsd:element ref="gp:CardInfo"/>			</xsd:sequence>			<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>			<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>			<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Chip">		<xsd:annotation>			<xsd:documentation>Contains all the general information about the chip present on the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Description" minOccurs="0"/>				<xsd:element ref="gp:Resources"/>				<xsd:element ref="gp:Powers"/>				<xsd:element ref="gp:Clock" minOccurs="0"/>				<xsd:element ref="gp:Communication"/>				<xsd:element ref="gp:CryptoEngine" minOccurs="0"/>			</xsd:sequence>			<xsd:attribute name="Name" type="xsd:string" use="required"/>			<xsd:attribute name="Model" type="xsd:string" use="required"/>			<xsd:attribute name="Version" type="gp:version" use="required"/>			<xsd:attribute name="ChipManufacturer" type="xsd:string" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Clock">		<xsd:annotation>			<xsd:documentation>Clock speed support.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Unit" type="xsd:string" use="required"/>			<xsd:attribute name="Min" type="xsd:decimal" use="required"/>			<xsd:attribute name="Max" type="xsd:decimal" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Communication">		<xsd:annotation>			<xsd:documentation>Communication support for both contact and contactless smart cards.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Contact" minOccurs="0"/>				<xsd:element ref="gp:Contactless" minOccurs="0"/>			</xsd:sequence>		</xsd:complexType>	</xsd:element>	<xsd:element name="Contact">		<xsd:annotation>			<xsd:documentation>Information specific to contact smart cards.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Protocols"/>			</xsd:sequence>			<xsd:attribute name="PPS" type="xsd:boolean"/>			<xsd:attribute name="Unit" type="xsd:string"/>			<xsd:attribute name="BaudRateMin" type="xsd:integer"/>			<xsd:attribute name="BaudRateMax" type="xsd:integer"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Contactless">		<xsd:annotation>			<xsd:documentation>Information specific to contactless smart cards.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Protocols"/>			</xsd:sequence>			<xsd:attribute name="Unit" type="xsd:string"/>			<xsd:attribute name="BaudRateMin" type="xsd:integer"/>			<xsd:attribute name="BaudRateMax" type="xsd:integer"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="CryptoEngine">		<xsd:annotation>			<xsd:documentation>Describes characteristics of the cryptographic engine in terms of key type and algorithm support.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Description" minOccurs="0"/>				<xsd:element ref="gp:KeyTypes"/>				<xsd:element ref="gp:Algorithm" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="xsd:string" use="required"/>			<xsd:attribute name="arrayIndex" type="xsd:string" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="KeyType">		<xsd:annotation>			<xsd:documentation>Characteristics of the key.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Name" type="xsd:string" use="required"/>			<xsd:attribute name="MaxLength" type="xsd:integer" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="KeyTypes">		<xsd:annotation>			<xsd:documentation>Placeholder element for one or more KeyTypes elements.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:KeyType" minOccurs="0" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="LoadFileInstance">		<xsd:annotation>			<xsd:documentation>A load file which is installed on a smart card corresponding to the Card Profile.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="ProfileID" type="gp:uniqueID" use="required"/>			<xsd:attribute name="Label" type="xsd:string"/>			<xsd:attribute name="LifeCycle" type="xsd:string" use="required"/>			<xsd:attribute name="Masked" type="xsd:boolean" use="required"/>			<xsd:attribute name="SecurityDomainAid" type="xsd:hexBinary"/>			<xsd:attribute name="Order" type="xsd:integer"/>			<xsd:attribute name="NonVolatileCodeSpaceLimit" type="xsd:integer"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="LoadFileInstances">		<xsd:annotation>			<xsd:documentation>Characteristics of a particular load file on the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:LoadFileInstance" minOccurs="0" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Platform">		<xsd:annotation>			<xsd:documentation>Platform supported by the chip.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Type" type="xsd:string" use="required"/>			<xsd:attribute name="Version" type="gp:version" use="required"/>			<xsd:attribute name="OSPlatform" type="xsd:string" use="required"/>			<xsd:attribute name="OSVersion" type="gp:version" use="required"/>			<xsd:attribute name="Implementor" type="xsd:string"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Power">		<xsd:annotation>			<xsd:documentation>Power support offered by the chip.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Unit" type="xsd:string" use="required"/>			<xsd:attribute name="Value" type="xsd:decimal" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Powers">		<xsd:annotation>			<xsd:documentation>Placeholder element for one or more Power elements.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Power" minOccurs="0" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Protocol">		<xsd:annotation>			<xsd:documentation>Protocol support offered by the chip.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Type" type="gp:protocol" use="required"/>			<xsd:attribute name="MaxApduLen" type="xsd:integer" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Protocols">		<xsd:annotation>			<xsd:documentation>Placeholder element for one or more Protocol elements.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Protocol" minOccurs="0" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Resources">		<xsd:annotation>			<xsd:documentation>Resources of the chip.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Unit" type="xsd:string" use="required"/>			<xsd:attribute name="ROM" type="xsd:integer" use="required"/>			<xsd:attribute name="RAM" type="xsd:integer" use="required"/>			<xsd:attribute name="EEPROM" type="xsd:integer" use="required"/>			<xsd:attribute name="Flash" type="xsd:integer" use="required"/>			<xsd:attribute name="GarbageCollection" type="xsd:boolean"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="ResourcesAvailable">		<xsd:annotation>			<xsd:documentation>Resources remaining on the smart card.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Unit" type="xsd:string" use="required"/>			<xsd:attribute name="RAM" type="xsd:integer" use="required"/>			<xsd:attribute name="EEPROM" type="xsd:integer" use="required"/>			<xsd:attribute name="Flash" type="xsd:integer" use="required"/>		</xsd:complexType>	</xsd:element></xsd:schema>');
INSERT INTO schemas (schemaid, schemaname, schemacontent) VALUES (27, N'GP.systems.profiles.1.1.0.KeyProfile.xsd', N'<?xml version="1.0" encoding="UTF-8"?><xsd:schema targetNamespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:gp="http://namespaces.globalplatform.org/systems-profiles/1.1.0" elementFormDefault="qualified" attributeFormDefault="unqualified">	<xsd:include schemaLocation="GP.systems.profiles.1.1.0.Common.xsd"/>	<xsd:element name="Attribute">		<xsd:annotation>			<xsd:documentation>The attribute of a key which references the Key Profile.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Importable" type="xsd:boolean" use="optional">				<xsd:annotation>					<xsd:documentation>The key represented by the key profile can be imported.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Exportable" type="xsd:boolean" use="optional">				<xsd:annotation>					<xsd:documentation>The key represented by the key profile can be exported.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Sensitive" type="xsd:boolean" use="optional">				<xsd:annotation>					<xsd:documentation>Whether there are restrictions on the manner in which keys can be exported.  Restrictions will include whether the key must be exportable in a wrapped state.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>		</xsd:complexType>	</xsd:element>	<xsd:element name="Value">		<xsd:annotation>			<xsd:documentation>The components and format of the key represented by the Key Profile.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Component" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="Format" type="gp:valueFormat" use="optional"/>			<xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>			<xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="Component">		<xsd:annotation>			<xsd:documentation>Components for CRT formatted key values.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Name" type="gp:componentName" use="optional">				<xsd:annotation>					<xsd:documentation>Name of the component.  If the Format attribute of the parent element is CRT, this is the CRT component.  If the Format attribute of the parent element is MOD_EXP or DES, then Name is not required.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Order" type="xsd:integer" use="optional">				<xsd:annotation>					<xsd:documentation>For CRT components, numeric order of the component.  This attribute should be unique amongst all components.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Value" type="xsd:string" use="optional">				<xsd:annotation>					<xsd:documentation>Value of the component.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Encoding" type="gp:encoding" use="optional">				<xsd:annotation>					<xsd:documentation>Encoding of the component</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="KCV" type="xsd:hexBinary" use="optional">				<xsd:annotation>					<xsd:documentation>Hexadecimal representation of the key check value.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>		</xsd:complexType>	</xsd:element>	<xsd:element name="KeyInfo">		<xsd:annotation>			<xsd:documentation>General information which a key which references the Key Profile inherits.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:KeyPart" minOccurs="0"/>				<xsd:element ref="gp:TransportKey" minOccurs="0"/>			</xsd:sequence>			<xsd:attribute name="Name" type="xsd:string" use="optional">				<xsd:annotation>					<xsd:documentation>Free text field.  Not necessarily unique amongst all key profiles.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="ID" type="xsd:hexBinary" use="optional">				<xsd:annotation>					<xsd:documentation>OID used to ID the key to be used during script processing, OID root will not be the same as the Key Profile ID.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Type" type="gp:keytype" use="required">				<xsd:annotation>					<xsd:documentation>Valid values:SECRET (symmetric)PRIVATE (asymmetric)PUBLIC (asymmetric)</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="SubType" type="gp:keysubtype" use="required">				<xsd:annotation>					<xsd:documentation>"The type of key:DESKeyRSAPrivateCrtKeyRSAPrivateKeyRSAPublicKeyAESKeyECPrivateKeyECPublicKeyNote : Certificates are treated as Data objects.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Size" type="xsd:integer" use="optional">				<xsd:annotation>					<xsd:documentation>If a value is specified for the key in the key profile, then the Size attribute must be specified.For RSA key, the modulus size in bits.For DES key, the length in bits including parity bits.  For example, a single length DES key is 64 bits, a double length DES key is 128 bits, and a triple length DES key is 192 bits.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Exponent" type="xsd:integer" use="optional">				<xsd:annotation>					<xsd:documentation>Exponent value for the RSA key.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Owner" type="xsd:hexBinary" use="optional"/>			<xsd:attribute name="Version" type="xsd:hexBinary" use="optional">				<xsd:annotation>					<xsd:documentation>To support legacy systems using Key Name and Key Version.  Hex value representation of numeric value of version.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="StartDate" type="xsd:date" use="optional"/>			<xsd:attribute name="EndDate" type="xsd:date" use="optional"/>			<xsd:attribute name="RecovationDate" type="xsd:date" use="optional">				<xsd:annotation>					<xsd:documentation>Revocation date for the Key Profile in the format YYYYMMDD.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="KCVAlgorithm" type="gp:kcvalgorithmtype" use="optional">				<xsd:annotation>					<xsd:documentation>Algorithm used to apply to the key check value for the key or key part represented by the Key Profile.  EIGHTZEROS (calculated by encrypting a block of zeros)</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="KCVSize" type="xsd:integer" use="optional">				<xsd:annotation>					<xsd:documentation>Length in nibbles of Key Check Value.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Mode" type="gp:mode" use="optional">				<xsd:annotation>					<xsd:documentation>Provides information about whether a key is intended for TEST or PRODUCTION environments.Valid value:	TEST	PRODUCTION</xsd:documentation>				</xsd:annotation>			</xsd:attribute>		</xsd:complexType>	</xsd:element>	<xsd:element name="KeyPart">		<xsd:annotation>			<xsd:documentation>For secret keys, element to describe number of parts as well as part number.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="NumberOfParts" type="xsd:integer" use="optional">				<xsd:annotation>					<xsd:documentation>Total number of parts making up the secret key.For example, if Key Profile represented the entire secret key, NumberOfParts could be used to specify number of consituent parts used to construct the secret key.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="PartNumber" type="xsd:integer" use="optional">				<xsd:annotation>					<xsd:documentation>Individual component number.  Should be unique amongst all individual key parts for a particular secret key.If order is required, then this PartNumber attribute can also be used to imply order of constructing the secret key as well as identifying the individual part number.For example, if Key Profile represented a key part used to construct a secret key, PartNumber could be used to specify to specify an unique part number.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Algorithm" type="gp:keypartalgorithm" use="optional">				<xsd:annotation>					<xsd:documentation>Algorithm used for constructing the secret key from the individual components.Valid values are: XOR CONCATE</xsd:documentation>				</xsd:annotation>			</xsd:attribute>		</xsd:complexType>	</xsd:element>	<xsd:element name="KeyProfile">		<xsd:annotation>			<xsd:documentation>Parent or root element for a Key Profile.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="gp:Description" minOccurs="0"/>				<xsd:element ref="gp:Revisions"/>				<xsd:element ref="gp:KeyInfo"/>				<xsd:element ref="gp:Attribute"/>				<xsd:element ref="gp:Usage"/>				<xsd:element ref="gp:Value" minOccurs="0"/>			</xsd:sequence>			<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required">				<xsd:annotation>					<xsd:documentation>The Identifier of the Key Profile as per Unique ID definition in Profiles Specification. </xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>			<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="TransportKey">		<xsd:annotation>			<xsd:documentation>The TransportKey element is used to describe the transport key used for exporting the key described be the key profile.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="ID" type="gp:uniqueID" use="optional">				<xsd:annotation>					<xsd:documentation>ID of the Transport Key.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Name" type="xsd:string" use="optional">				<xsd:annotation>					<xsd:documentation>Name of the Transport Key.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Owner" type="xsd:hexBinary" use="optional">				<xsd:annotation>					<xsd:documentation>Owner of the Transport Key.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Version" type="xsd:hexBinary" use="optional">				<xsd:annotation>					<xsd:documentation>Version of the Transport Key.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="Algorithm" type="gp:tkalgorithm" use="optional">				<xsd:annotation>					<xsd:documentation>Algorithm used with the Transport Key when exporting a key.Valid values are:	CBC	ECB</xsd:documentation>				</xsd:annotation>			</xsd:attribute>			<xsd:attribute name="AlgorithmParameters" type="xsd:hexBinary" use="optional">				<xsd:annotation>					<xsd:documentation>If present, represents the initial vector to be used if Algorithm attribute is CBC.</xsd:documentation>				</xsd:annotation>			</xsd:attribute>		</xsd:complexType>	</xsd:element>	<xsd:element name="Usage">		<xsd:annotation>			<xsd:documentation>Cryptographic operations which can be performed with a key which references the Key Profile.</xsd:documentation>		</xsd:annotation>		<xsd:complexType>			<xsd:attribute name="Encrypt" type="xsd:boolean" use="optional"/>			<xsd:attribute name="Decrypt" type="xsd:boolean" use="optional"/>			<xsd:attribute name="DecryptEncrypt" type="xsd:boolean" use="optional"/>			<xsd:attribute name="Sign" type="xsd:boolean" use="optional"/>			<xsd:attribute name="Verify" type="xsd:boolean" use="optional"/>			<xsd:attribute name="Wrap" type="xsd:boolean" use="optional"/>			<xsd:attribute name="Unwrap" type="xsd:boolean" use="optional"/>			<xsd:attribute name="UnwrapWrap" type="xsd:boolean" use="optional"/>			<xsd:attribute name="Derive" type="xsd:boolean" use="optional"/>		</xsd:complexType>	</xsd:element></xsd:schema>');
INSERT INTO schemas (schemaid, schemaname, schemacontent) VALUES (28, N'GP.systems.profiles.1.1.0.LoadFileProfile.xsd', N'<?xml version="1.0" encoding="UTF-8"?>  <xsd:schema targetNamespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:gp="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">   <xsd:include schemaLocation="GP.systems.profiles.1.1.0.Common.xsd"/>   <xsd:annotation>    <xsd:documentation>General freeform container for description text fields.</xsd:documentation>   </xsd:annotation>   <xsd:element name="LoadFileInfo">    <xsd:annotation>     <xsd:documentation>General information about the load file.</xsd:documentation>    </xsd:annotation>    <xsd:complexType>     <xsd:attribute name="AID" type="xsd:hexBinary" use="required"/>     <xsd:attribute name="Version" type="gp:version" use="required"/>     <xsd:attribute name="NonVolatileCodeSpaceLimit" type="xsd:integer"/>     <xsd:attribute name="NonVolatileDataSpaceMin" type="xsd:integer"/>     <xsd:attribute name="VolatileDataSpaceMin" type="xsd:integer"/>    </xsd:complexType>   </xsd:element>   <xsd:element name="LoadFileProfile">    <xsd:annotation>     <xsd:documentation>Parent or root element of Load File Profile.</xsd:documentation>    </xsd:annotation>    <xsd:complexType>     <xsd:sequence>      <xsd:element ref="gp:Description" minOccurs="0"/>      <xsd:element ref="gp:Revisions"/>      <xsd:element ref="gp:ConflictRules"/>      <xsd:element ref="gp:LoadFileInfo"/>      <xsd:element ref="gp:Modules"/>      <xsd:element ref="gp:ApplicationCode" minOccurs="0"/>     </xsd:sequence>     <xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>     <xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>     <xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>    </xsd:complexType>   </xsd:element>   <xsd:element name="Module">    <xsd:annotation>     <xsd:documentation>Information about individual modules within the load file.</xsd:documentation>    </xsd:annotation>    <xsd:complexType>     <xsd:sequence>      <xsd:element ref="gp:Description" minOccurs="0"/>     </xsd:sequence>     <xsd:attribute name="ModuleID" type="xsd:hexBinary" use="required"/>     <xsd:attribute name="AID" type="xsd:hexBinary" use="required"/>    </xsd:complexType>   </xsd:element>   <xsd:element name="Modules">    <xsd:annotation>     <xsd:documentation>Placeholder element for one or more Module elements.</xsd:documentation>    </xsd:annotation>    <xsd:complexType>     <xsd:sequence>      <xsd:element ref="gp:Module" minOccurs="0" maxOccurs="unbounded"/>     </xsd:sequence>     <xsd:attribute name="arrayElement" type="gp:arrayList" use="required"/>     <xsd:attribute name="arrayIndex" type="gp:indexList" use="required"/>    </xsd:complexType>   </xsd:element>   <xsd:element name="ApplicationCode">    <xsd:annotation>     <xsd:documentation>The representation of the load file provided as the value of this element.</xsd:documentation>    </xsd:annotation>    <xsd:complexType>     <xsd:simpleContent>      <xsd:extension base="xsd:string">       <xsd:attribute name="Encoding" type="gp:encoding" use="required"/>      </xsd:extension>     </xsd:simpleContent>    </xsd:complexType>   </xsd:element>  </xsd:schema>');
INSERT INTO schemas (schemaid, schemaname, schemacontent) VALUES (29, N'Datacard.GP.Types.xsd', N'<?xml version="1.0" encoding="UTF-8"?><xsd:schema targetNamespace="http://www.datacard.com/gpProfiles" xmlns:gp="http://namespaces.globalplatform.org/systems-profiles/1.1.0" xmlns:dcc="http://www.datacard.com/gpProfiles" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:Q1="xs" version="1.0">	<xsd:import namespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" schemaLocation="GP.systems.profiles.1.1.0.Common.xsd"/>	<xsd:import namespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" schemaLocation="GP.systems.profiles.1.1.0.KeyProfile.xsd"/>	<xsd:import namespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" schemaLocation="GP.systems.profiles.1.1.0.CardProfile.xsd"/>	<xsd:import namespace="http://namespaces.globalplatform.org/systems-profiles/1.1.0" schemaLocation="GP.systems.profiles.1.1.0.ApplicationProfile.xsd"/>	<xsd:element name="Job" type="dcc:job"/>	<xsd:element name="Product" type="dcc:product"/>	<xsd:element name="ADT" type="dcc:adt"/>	<xsd:element name="APIM" type="dcc:apim"/>	<xsd:element name="APOM" type="dcc:apom"/>	<xsd:element name="DataSet" type="dcc:dataSet"/>	<!-- =====================================Type Definition for UML diagram ONLY=====================================	<xsd:complexType name="cardOID">		<xsd:sequence>			<xsd:element ref="gp:CardProfile" />		</xsd:sequence>	</xsd:complexType>	<xsd:complexType name="applicationOID">		<xsd:sequence>			<xsd:element ref="gp:ApplicationProfile" />		</xsd:sequence>	</xsd:complexType>	<xsd:complexType name="dataSetOID">		<xsd:sequence>			<xsd:element name="DataSet" type="dcc:dataSet" />		</xsd:sequence>	</xsd:complexType>	<xsd:complexType name="productOID">		<xsd:sequence>			<xsd:element name="Product" type="dcc:product" />		</xsd:sequence>	</xsd:complexType> -->	<!-- =====================================Type Definition for Datacard Profiles=====================================-->	<xsd:complexType name="cardOID">		<xsd:simpleContent>			<xsd:extension base="gp:uniqueID"/>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="applicationOID">		<xsd:simpleContent>			<xsd:extension base="gp:uniqueID"/>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="dataSetOID">		<xsd:simpleContent>			<xsd:extension base="gp:uniqueID"/>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="productOID">		<xsd:simpleContent>			<xsd:extension base="gp:uniqueID"/>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="adtOID">		<xsd:simpleContent>			<xsd:extension base="gp:uniqueID"/>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="job">		<xsd:sequence>			<xsd:element ref="gp:Description" minOccurs="0"/>			<xsd:element ref="gp:Revisions"/>			<xsd:element name="InputDataSet" type="dcc:dataSetOID"/>			<xsd:element name="OutputDataSet" type="dcc:dataSetOID"/>			<xsd:element name="ListProperty" type="dcc:list-property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="Property" type="dcc:property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="Product" type="dcc:productOID"/>			<xsd:element name="Method" type="dcc:methodJob" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>		<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>		<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>	</xsd:complexType>	<xsd:complexType name="product">		<xsd:sequence>			<xsd:element ref="gp:Description" minOccurs="0"/>			<xsd:element ref="gp:Revisions"/>			<xsd:element name="InputCardProfile" type="dcc:cardOID" minOccurs="0"/>			<xsd:element name="OutputCardProfile" type="dcc:cardOID" minOccurs="0"/>			<xsd:element name="ListProperty" type="dcc:list-property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="Property" type="dcc:property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="ApplicationInstance" type="dcc:applicationInstance" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="ProcessStep" type="dcc:processStep" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>		<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>		<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>	</xsd:complexType>	<xsd:complexType name="adt">		<xsd:annotation>			<xsd:documentation>Application Data Template</xsd:documentation>		</xsd:annotation>		<xsd:sequence>			<xsd:element ref="gp:Description" minOccurs="0"/>			<xsd:element ref="gp:Revisions"/>			<xsd:element name="ParentAdt" type="dcc:adtOID" minOccurs="0"/>			<xsd:element name="ApplicationProfile" type="dcc:applicationOID"/>			<xsd:element name="Tool" type="dcc:toolReference" minOccurs="0"/>			<xsd:element name="DataElement" type="dcc:property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="KeyElement" type="dcc:keyElement" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>		<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>		<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>	</xsd:complexType>	<xsd:complexType name="apim">		<xsd:annotation>			<xsd:documentation>Application Profile Input Mapping</xsd:documentation>		</xsd:annotation>		<xsd:sequence>			<xsd:element ref="gp:Description" minOccurs="0"/>			<xsd:element ref="gp:Revisions"/>			<xsd:element name="ApplicationProfile" type="dcc:applicationOID"/>			<xsd:element name="DataSet" type="dcc:dataSetOID"/>			<xsd:element name="ApplicationDataTemplate" type="dcc:adtOID" minOccurs="0"/>			<xsd:element name="ScriptFragment" type="dcc:scriptFragmentInputMapping" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>		<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>		<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>	</xsd:complexType>	<xsd:complexType name="apom">		<xsd:annotation>			<xsd:documentation>Application Profile Output Mapping</xsd:documentation>		</xsd:annotation>		<xsd:sequence>			<xsd:element ref="gp:Description" minOccurs="0"/>			<xsd:element ref="gp:Revisions"/>			<xsd:element name="ApplicationProfile" type="dcc:applicationOID"/>			<xsd:element name="DataSet" type="dcc:dataSetOID"/>			<xsd:element name="ScriptFragment" type="dcc:scriptFragmentOutputMapping" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>		<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>		<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>	</xsd:complexType>	<xsd:complexType name="dataSet">		<xsd:annotation>			<xsd:documentation>Set of script to parse the incoming data</xsd:documentation>		</xsd:annotation>		<xsd:sequence>			<xsd:element ref="gp:Description" minOccurs="0"/>			<xsd:element ref="gp:Revisions"/>			<xsd:element name="Property" type="dcc:property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="ListProperty" type="dcc:list-property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="Method" type="dcc:methodScriptDataSet" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>		<xsd:attribute name="ProfileVersion" type="gp:version" use="required"/>		<xsd:attribute name="ErrataVersion" type="xsd:integer" use="optional"/>	</xsd:complexType>	<xsd:simpleType name="identifier">		<xsd:restriction base="xsd:token">			<xsd:pattern value="A-Za-z$_A-Za-z0-9$_*"/>		</xsd:restriction>	</xsd:simpleType>	<xsd:simpleType name="hexOrSystemAidProperty">		<xsd:union memberTypes="xsd:hexBinary">			<xsd:simpleType>				<xsd:restriction base="xsd:string">					<xsd:pattern value="$AID\\n+\"/>					<xsd:pattern value="$ISD"/>				</xsd:restriction>			</xsd:simpleType>		</xsd:union>	</xsd:simpleType>	<xsd:simpleType name="javascript">		<xsd:restriction base="xsd:string"/>	</xsd:simpleType>	<xsd:complexType name="configVPA">		<xsd:attribute name="Pan" type="xsd:string"/>		<xsd:attribute name="Profile" type="xsd:string" use="required"/>		<xsd:attribute name="Profileid" type="xsd:string" use="required"/>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>	</xsd:complexType>	<xsd:complexType name="configCU">		<xsd:attribute name="Profileid" type="xsd:string" use="required"/>		<xsd:attribute name="UniqueID" type="gp:uniqueID" use="required"/>	</xsd:complexType>	<xsd:complexType name="toolReference">		<xsd:choice>			<xsd:element name="ConfigVPA" type="dcc:configVPA"/>			<xsd:element name="ConfigCU" type="dcc:configCU"/>		</xsd:choice>	</xsd:complexType>	<xsd:complexType name="applicationInstance">		<xsd:sequence>			<xsd:element name="Adt" type="dcc:adtOID" minOccurs="0"/>			<xsd:element name="ApplicationProfile" type="dcc:applicationOID"/>		</xsd:sequence>		<xsd:attribute name="AID" type="dcc:hexOrSystemAidProperty" use="required"/>		<xsd:attribute name="SecurityDomain" type="dcc:hexOrSystemAidProperty"/>	</xsd:complexType>	<xsd:complexType name="processStep">		<xsd:annotation>			<xsd:documentation>				Script fragment to execute for an AID. InputMapping will be used only for the first executed process step of an AID OutputMapping will				be used only for the last executed process step of an AID			</xsd:documentation>		</xsd:annotation>		<xsd:sequence>			<xsd:element name="Method" type="dcc:methodProcessStep" minOccurs="0" maxOccurs="2"/>		</xsd:sequence>		<xsd:attribute name="AID" type="dcc:hexOrSystemAidProperty" use="required"/>		<xsd:attribute name="ScriptFragment" type="dcc:identifier" use="required"/>	</xsd:complexType>	<xsd:complexType name="scriptFragmentInputMapping">		<xsd:sequence>			<xsd:element name="DataElement" type="dcc:property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="KeyElement" type="dcc:keyElement" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="Name" type="dcc:identifier" use="required"/>	</xsd:complexType>	<xsd:complexType name="scriptFragmentOutputMapping">		<xsd:sequence>			<xsd:choice minOccurs="0" maxOccurs="unbounded">				<xsd:element name="DataElement" type="dcc:dataElementOut" minOccurs="0" maxOccurs="unbounded"/>				<xsd:element name="KeyElement" type="dcc:keyElementOut" minOccurs="0" maxOccurs="unbounded"/>			</xsd:choice>		</xsd:sequence>		<xsd:attribute name="Name" type="dcc:identifier" use="required"/>	</xsd:complexType>	<xsd:complexType name="dataElement">		<xsd:simpleContent>			<xsd:extension base="xsd:string">				<xsd:attribute name="Name" type="dcc:identifier" use="required"/>				<xsd:attribute name="Encoding" type="gp:encoding" use="required"/>				<xsd:attribute name="ReadOnly" type="xsd:boolean"/>			</xsd:extension>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="keyElement">		<xsd:sequence>			<xsd:element name="Property" type="dcc:keyProperty" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="Name" type="dcc:identifier" use="required"/>	</xsd:complexType>	<xsd:complexType name="dataElementOut">		<xsd:sequence>			<xsd:element ref="gp:TransportKey" minOccurs="0"/>		</xsd:sequence>		<xsd:attribute name="Name" type="dcc:identifier" use="required"/>		<xsd:attribute name="Tag" type="xsd:hexBinary" use="optional"/>		<xsd:attribute name="TLV" type="xsd:boolean" use="optional"/>		<xsd:attribute name="Separator" type="xsd:boolean" use="optional" default="false"/>		<xsd:attribute name="Optional" type="xsd:boolean" use="optional" default="false"/>	</xsd:complexType>	<xsd:complexType name="keyElementOut">		<xsd:sequence>			<xsd:element ref="gp:TransportKey" minOccurs="0"/>		</xsd:sequence>		<xsd:attribute name="Name" type="dcc:identifier" use="required"/>		<xsd:attribute name="Tag" type="xsd:hexBinary" use="optional"/>		<xsd:attribute name="Optional" type="xsd:boolean" use="optional" default="false"/>	</xsd:complexType>	<xsd:complexType name="method">		<xsd:simpleContent>			<xsd:extension base="xsd:string">				<xsd:attribute name="Name" type="dcc:identifier" use="required"/>				<xsd:attribute name="ReturnType" type="dcc:identifier" use="optional"/>				<xsd:attribute name="Language" type="xsd:string" use="optional" default="GPScript"/>				<xsd:attribute name="Version" type="gp:version" use="optional" default="1.1.0"/>			</xsd:extension>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="methodBoolean">		<xsd:simpleContent>			<xsd:restriction base="dcc:method">				<xsd:attribute name="ReturnType" type="dcc:identifier" use="required" fixed="boolean"/>			</xsd:restriction>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="methodJob">		<xsd:simpleContent>			<xsd:restriction base="dcc:method">				<xsd:attribute name="Name" type="dcc:identifier" use="required" fixed="selectProduct"/>				<xsd:attribute name="ReturnType" type="dcc:identifier" use="required" fixed="productOID"/>			</xsd:restriction>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="methodProcessStep">		<xsd:simpleContent>			<xsd:restriction base="dcc:methodBoolean">				<xsd:attribute name="Name" use="required">					<xsd:simpleType>						<xsd:restriction base="dcc:identifier">							<xsd:enumeration value="exceptionIf"/>							<xsd:enumeration value="executeIf"/>						</xsd:restriction>					</xsd:simpleType>				</xsd:attribute>			</xsd:restriction>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="methodScriptDataSet">		<xsd:simpleContent>			<xsd:restriction base="dcc:method">				<xsd:attribute name="Name" use="required">					<xsd:simpleType>						<xsd:restriction base="dcc:identifier">							<xsd:enumeration value="beforeOpen"/>							<xsd:enumeration value="open"/>							<xsd:enumeration value="afterOpen"/>							<xsd:enumeration value="beforeClose"/>							<xsd:enumeration value="close"/>							<xsd:enumeration value="afterClose"/>							<xsd:enumeration value="read"/>							<xsd:enumeration value="write"/>						</xsd:restriction>					</xsd:simpleType>				</xsd:attribute>			</xsd:restriction>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="list-property">		<xsd:sequence>			<xsd:element name="structure" type="dcc:structure" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="Name" type="dcc:identifier" use="required"/>	</xsd:complexType>	<xsd:complexType name="structure">		<xsd:sequence>			<xsd:element name="Property" type="dcc:property" minOccurs="0" maxOccurs="unbounded"/>			<xsd:element name="Structure" type="dcc:structure" minOccurs="0" maxOccurs="unbounded"/>		</xsd:sequence>		<xsd:attribute name="Name" type="dcc:identifier"/>	</xsd:complexType>	<xsd:complexType name="property">		<xsd:simpleContent>			<xsd:extension base="xsd:string">				<xsd:attribute name="Name" type="dcc:identifier" use="required"/>				<xsd:attribute name="Encoding" type="gp:encoding" use="required"/>				<xsd:attribute name="ReadOnly" type="xsd:boolean" default="false"/>				<xsd:attribute name="MappingTag" type="xsd:hexBinary" use="optional"/>				<xsd:attribute name="Profile" type="xsd:hexBinary" use="optional"/>				<xsd:attribute name="Pda" type="xsd:string"/>			</xsd:extension>		</xsd:simpleContent>	</xsd:complexType>	<xsd:complexType name="keyProperty">		<xsd:simpleContent>			<xsd:restriction base="dcc:property">				<xsd:attribute name="Name" use="required">					<xsd:simpleType>						<xsd:restriction base="dcc:identifier">							<xsd:enumeration value="VALUE"/>							<xsd:enumeration value="KCV"/>							<xsd:enumeration value="CRT_P"/>							<xsd:enumeration value="CRT_Q"/>							<xsd:enumeration value="CRT_DP1"/>							<xsd:enumeration value="CRT_DQ1"/>							<xsd:enumeration value="CRT_PQ"/>							<xsd:enumeration value="MODULUS"/>							<xsd:enumeration value="EXPONENT"/>						</xsd:restriction>					</xsd:simpleType>				</xsd:attribute>			</xsd:restriction>		</xsd:simpleContent>	</xsd:complexType>	<xsd:element name="InputVPA">		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="dcc:tagelement" maxOccurs="unbounded"/>			</xsd:sequence>			<xsd:attribute name="pan" type="xsd:string"/>			<xsd:attribute name="profile" type="xsd:string" use="required"/>			<xsd:attribute name="profileid" type="xsd:string" use="required"/>		</xsd:complexType>	</xsd:element>	<xsd:element name="tag" type="xsd:string"/>	<xsd:element name="tagelement">		<xsd:complexType>			<xsd:sequence>				<xsd:element ref="dcc:tagname"/>				<xsd:element ref="dcc:tag"/>				<xsd:element ref="dcc:taglength"/>				<xsd:element ref="dcc:tagvalue"/>			</xsd:sequence>		</xsd:complexType>	</xsd:element>	<xsd:element name="taglength" type="xsd:string"/>	<xsd:element name="tagname">		<xsd:complexType>			<xsd:simpleContent>				<xsd:extension base="xsd:NMTOKEN">					<xsd:attribute name="category" default="VSDC">						<xsd:simpleType>							<xsd:restriction base="xsd:NMTOKEN">								<xsd:enumeration value="VSDC"/>								<xsd:enumeration value="VLP"/>								<xsd:enumeration value="Domestic"/>								<xsd:enumeration value="International"/>							</xsd:restriction>						</xsd:simpleType>					</xsd:attribute>				</xsd:extension>			</xsd:simpleContent>		</xsd:complexType>	</xsd:element>	<xsd:element name="tagvalue" type="xsd:string"/></xsd:schema>');

DROP TABLE IF EXISTS CARD;
CREATE TABLE CARD(
	uniqueID int IDENTITY(1,1) NOT NULL,
	CARDHOLDER int NOT NULL,
	GRAPHIC varchar(2000) NULL,
	PRINTER int NULL,
	STATUS int NULL,
	AUDIT varchar(8000) NULL,
	PRINT_DATE smalldatetime NULL,
	PRODUCT int NULL,
	DUPLICATE_PAN int NULL,
	DUPLICATE_PIN int NULL,
	PIN int NULL,
	PAN_DIGEST varchar(100) NULL,
	PRIMARY KEY (uniqueID)
);

INSERT INTO CARD (uniqueID, CARDHOLDER, GRAPHIC, PRINTER, STATUS, AUDIT, PRINT_DATE, PRODUCT, DUPLICATE_PAN, DUPLICATE_PIN, PIN, PAN_DIGEST) VALUES (452, 600, N'images/mountainlakeKOBWlogo_o.jpg', 1, 0, NULL, CURRENT_TIMESTAMP, 10, NULL, NULL, NULL, NULL);
INSERT INTO CARD (uniqueID, CARDHOLDER, GRAPHIC, PRINTER, STATUS, AUDIT, PRINT_DATE, PRODUCT, DUPLICATE_PAN, DUPLICATE_PIN, PIN, PAN_DIGEST) VALUES (453, 593, N'images/mountainlakeKOBWlogo_o.jpg', 2, 1, NULL, CURRENT_TIMESTAMP, 10, NULL, NULL, NULL, NULL);
INSERT INTO CARD (uniqueID, CARDHOLDER, GRAPHIC, PRINTER, STATUS, AUDIT, PRINT_DATE, PRODUCT, DUPLICATE_PAN, DUPLICATE_PIN, PIN, PAN_DIGEST) VALUES (454, 597, N'images/goldengate_o.jpg', 2, 1, NULL, CURRENT_TIMESTAMP, 10, NULL, NULL, NULL, NULL);
INSERT INTO CARD (uniqueID, CARDHOLDER, GRAPHIC, PRINTER, STATUS, AUDIT, PRINT_DATE, PRODUCT, DUPLICATE_PAN, DUPLICATE_PIN, PIN, PAN_DIGEST) VALUES (455, 592, N'images/5202KOBWlogo_o.jpg', 11, 0, NULL, CURRENT_TIMESTAMP, 12, NULL, NULL, NULL, NULL);
INSERT INTO CARD (uniqueID, CARDHOLDER, GRAPHIC, PRINTER, STATUS, AUDIT, PRINT_DATE, PRODUCT, DUPLICATE_PAN, DUPLICATE_PIN, PIN, PAN_DIGEST) VALUES (456, 591, N'images/5202KOBWlogo_o.jpg', 11, 0, NULL, CURRENT_TIMESTAMP, 12, NULL, NULL, NULL, NULL);
INSERT INTO CARD (uniqueID, CARDHOLDER, GRAPHIC, PRINTER, STATUS, AUDIT, PRINT_DATE, PRODUCT, DUPLICATE_PAN, DUPLICATE_PIN, PIN, PAN_DIGEST) VALUES (457, 590, N'images/5202KOBWlogo_o.jpg', 11, 0, NULL, CURRENT_TIMESTAMP, 12, NULL, NULL, NULL, NULL);
INSERT INTO CARD (uniqueID, CARDHOLDER, GRAPHIC, PRINTER, STATUS, AUDIT, PRINT_DATE, PRODUCT, DUPLICATE_PAN, DUPLICATE_PIN, PIN, PAN_DIGEST) VALUES (458, 597, N'images/yellowflower3_o.jpg', 2, 1, NULL, CURRENT_TIMESTAMP, 10, NULL, NULL, NULL, NULL);

DROP TABLE IF EXISTS HW_TYPE;
CREATE TABLE HW_TYPE(
	uniqueID int IDENTITY(1,1) NOT NULL,
	HW_TYPE varchar(20) NOT NULL,
	PRIMARY KEY  (	uniqueID )
);

INSERT INTO HW_TYPE (uniqueID, HW_TYPE) VALUES (2, N'Card');
INSERT INTO HW_TYPE (uniqueID, HW_TYPE) VALUES (3, N'Other');
INSERT INTO HW_TYPE (uniqueID, HW_TYPE) VALUES (1, N'Printer');


DROP TABLE IF EXISTS USER_TYPE;
CREATE TABLE USER_TYPE(
	uniqueID int NOT NULL,
	NAME varchar(20) NOT NULL,
	PRIMARY KEY  (	uniqueID)
);

INSERT INTO USER_TYPE (uniqueID, NAME) VALUES (119, N'Site User');
INSERT INTO USER_TYPE (uniqueID, NAME) VALUES (127, N'Site Administrator');
INSERT INTO USER_TYPE (uniqueID, NAME) VALUES (128, N'manager');
INSERT INTO USER_TYPE (uniqueID, NAME) VALUES (247, N'System User');
INSERT INTO USER_TYPE (uniqueID, NAME) VALUES (255, N'System Administrator');

DROP TABLE IF EXISTS USER;
CREATE TABLE USER(
	uniqueID int IDENTITY(1,1) NOT NULL,
	LOGIN varchar(24) NOT NULL,
	LASTNAME varchar(50) NULL,
	FIRSTNAME varchar(50) NULL,
	EMAIL varchar(50) NULL,
	PASSWORD varchar(50) NULL,
	SITE int NULL,
	USER_TYPE int NOT NULL,
	LAST_LOGIN timestamp,
	FAILED int NULL,
	PRIMARY KEY  (	uniqueID)
);

INSERT INTO USER (uniqueID, LOGIN, LASTNAME, FIRSTNAME, EMAIL, PASSWORD, SITE, USER_TYPE, FAILED) VALUES (1, N'admin', N'System', N'Administrator', N'admin@datacard.com', N'21232F297A57A5A743894A0E4A801FC3', 1, 255, 0);
INSERT INTO USER (uniqueID, LOGIN, LASTNAME, FIRSTNAME, EMAIL, PASSWORD, SITE, USER_TYPE, FAILED) VALUES (2, N'admin1', N'Site#1', N'Administrator', N'admin1@datacard.com', N'E00CF25AD42683B3DF678C61F42C6BDA', 2, 127, 0);
INSERT INTO USER (uniqueID, LOGIN, LASTNAME, FIRSTNAME, EMAIL, PASSWORD, SITE, USER_TYPE, FAILED) VALUES (3, N'admin2', N'Site#2', N'Administrator', N'admin2@datacard.com', N'C84258E9C39059A89AB77D846DDAB909', 3, 127, 0);
INSERT INTO USER (uniqueID, LOGIN, LASTNAME, FIRSTNAME, EMAIL, PASSWORD, SITE, USER_TYPE, FAILED) VALUES (4, N'user', N'System', N'User', N'user@datacard.com', N'EE11CBB19052E40B07AAC0CA060C23EE', 1, 119, 0);
INSERT INTO USER (uniqueID, LOGIN, LASTNAME, FIRSTNAME, EMAIL, PASSWORD, SITE, USER_TYPE, FAILED) VALUES (5, N'user1', N'Site#1', N'User', N'user1@datacard.com', N'24C9E15E52AFC47C225B757E7BEE1F9D', 2, 119, 0);
INSERT INTO USER (uniqueID, LOGIN, LASTNAME, FIRSTNAME, EMAIL, PASSWORD, SITE, USER_TYPE, FAILED) VALUES (6, N'user2', N'Site#2', N'User', N'user2@datacard.com', N'7E58D63B60197CEB55A1C487989A3720', 3, 119, 0);

DROP TABLE IF EXISTS PRODUCT;
CREATE TABLE PRODUCT(
	uniqueID int IDENTITY(1,1) NOT NULL,
	DESCRIPTION varchar(50) NOT NULL,
	APS varchar(255) NULL,
	SMARTCARD int NULL,
	MAGSTRIPE int NULL,
	INDENT int NULL,
	EMBOSS int NULL,
	OVERLAY int NULL,
	PRINTERS varchar(255) NULL,
	GRAPHICS varchar(8000) NULL,
	TEMPLATE varchar(255) NULL,
	PRIMARY KEY  (	uniqueID)
);

INSERT INTO PRODUCT (uniqueID, DESCRIPTION, APS, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, PRINTERS, GRAPHICS, TEMPLATE) VALUES (18, N'Scenic Rewards Card', N'2B0601040181900D881A0501', 0, 1, 1, 0, 0, NULL, N'<photos><photo id="_local_" height_o="2337" url_o="images/mountainlake_o.jpg" url_t="images/mountainlake_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/lighthousesunset_o.jpg" url_t="images/lighthousesunset_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/goldengate_o.jpg" url_t="images/goldengate_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/yellowflower3_o.jpg" url_t="images/yellowflower3_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/5168_o.jpg" url_t="images/5168_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/5180_o.jpg" url_t="images/5180_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/5138_o.jpg" url_t="images/5138_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/5123_o.jpg" url_t="images/5123_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/5202_o.jpg" url_t="images/5202_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/NA001110_o.jpg" url_t="images/NA001110_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/WL000373_o.jpg" url_t="images/WL000373_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/5259_o.jpg" url_t="images/5259_t.jpg" width_o="3500"/><photo id="_local_" height_o="2337" url_o="images/5344_o.jpg" url_t="images/5344_t.jpg" width_o="3500"/></photos>', N'ScenicRewards.svg');
INSERT INTO PRODUCT (uniqueID, DESCRIPTION, APS, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, PRINTERS, GRAPHICS, TEMPLATE) VALUES (19, N'Brand Mark', N'2B0601040181900D881A0501', 0, 1, 1, 0, 0, NULL, N'<photos><photo width_o="3500" height_o="2337" id="_local_" url_o="images/Datacard_Brand_Mark_o.jpg" url_t="images/Datacard_Brand_Mark_t.jpg"/></photos>', N'Brandmark.svg');
INSERT INTO PRODUCT (uniqueID, DESCRIPTION, APS, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, PRINTERS, GRAPHICS, TEMPLATE) VALUES (20, N'Card Image', N'2B0601040181900D881A0501', 0, 1, 1, 0, 0, NULL, N'<photos><photo id="_local_" url_o="images/mountainlakeKOBWlogo_o.jpg" url_t="images/mountainlakeKOBWlogo_t.jpg" width_o="3500" height_o="2337"/><photo id="_local_" url_o="images/lighthousesunsetKOBWlogo_o.jpg" url_t="images/lighthousesunsetKOBWlogo_t.jpg" width_o="3500" height_o="2337"/><photo id="_local_" url_o="images/5202KOBWlogo_o.jpg" url_t="images/5202KOBWlogo_t.jpg" width_o="3500" height_o="2337"/></photos>', N'CardImage.svg');

DROP TABLE IF EXISTS HW_MODEL;
CREATE TABLE HW_MODEL(
	uniqueID int IDENTITY(1,1) NOT NULL,
	MODEL varchar(50) NOT NULL,
	DRIVER varchar(50) NULL,
	PICTURE varchar(500) NULL,
	HW_TYPE int NOT NULL,
	PRIMARY KEY  (	uniqueID)
);

INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (1, N'RP90I', N'RP90', N'resources/printer/rp90i.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (2, N'FP65i', N'SmartdriverPrinter', N'resources/printer/fp65.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (3, N'SP55', N'PDFPrinter', N'resources/printer/sp55.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (4, N'Magstripe Card', N'', N'', 2);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (5, N'SmartCard', N'', N'', 2);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (6, N'Plastic Card', N'', N'', 2);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (7, N'RP90-E+', N'RP90', N'resources/printer/rp90i.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (8, N'150i', N'150i', N'resources/printer/150i.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (9, N'FILE', N'FILE', N'resources/printer/mx.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (10, N'TRASH', N'TRASH', N'resources/printer/trash.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (11, N'CE870', N'CE870', N'resources/printer/ce870.png', 1);
INSERT INTO HW_MODEL (uniqueID, MODEL, DRIVER, PICTURE, HW_TYPE) VALUES (12, N'CE840', N'CE840', N'resources/printer/ce840.png', 1);


DROP TABLE IF EXISTS CARDHOLDER;
CREATE TABLE CARDHOLDER(
	uniqueID int IDENTITY(1,1) NOT NULL,
	PRODUCT int NOT NULL,
	SITE int NOT NULL,	
	FIRSTNAME varchar(50),
	LASTNAME varchar(50),
	PAN varchar(20)NOT NULL,
	EXPIRY_DATE varchar(20),
	CVV2 varchar(20),	
	ICVV varchar(20),		
	TRACK1 varchar(100),	
	TRACK2 varchar(100),	
	TRACK3 varchar(100),	
	CHIPDATA varchar(300),
	TextField1 varchar(20),	
	TextField2 varchar(20),
	TextField3 varchar(20),
	TextField4 varchar(20),
	TextField5 varchar(20),		
	ENTRY_DATE smalldatetime,	
	PRIMARY KEY  (	uniqueID)
);

DROP TABLE IF EXISTS PRINTER;
CREATE TABLE PRINTER(
	uniqueID int IDENTITY(1,1) NOT NULL,
	FULL_NAME varchar(50) NOT NULL,
	SERIAL_NUMBER varchar(20) NOT NULL,
	IP varchar(20) NOT NULL,
	SMARTCARD int NULL,
	MAGSTRIPE int NULL,
	INDENT int NULL,
	EMBOSS int NULL,
	OVERLAY int NULL,
	HW_MODEL int NOT NULL,
	SITE int NOT NULL,
	STATUS int NULL,
	LAST_MODIFIED timestamp NULL,
	PRIMARY KEY  (	uniqueID)
);

alter table PRINTER add column DESCRIPTION varchar(50) NULL ;
alter table PRINTER add column STATE INT NULL;
alter table PRINTER add column CREATETIME timestamp NULL;

alter table PRINTER add column RECYCLE int NULL;
alter table PRINTER add column UG int NULL;
alter table PRINTER add column LAMINATE int NULL;
alter table PRINTER add column RE_TRANSFER int NULL;
alter table PRINTER add column STR1 varchar(50) NULL;
alter table PRINTER add column STR2 varchar(50) NULL;
alter table PRINTER alter column uniqueID INT auto_increment;

INSERT INTO PRINTER (FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, SITE, HW_MODEL, STATUS,STATE,RECYCLE,UG,LAMINATE,RE_TRANSFER,CREATETIME,LAST_MODIFIED) VALUES ( N'CE870', N'CE870-106', N'172.16.32.100', 0, 1, 0, 0, 8, 11, 0,0,0,0,0,0,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (1, N'RP90i', N'RP90-106', N'172.16.32.106', 0, 1, 0, 0, 0, 1, 2, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (2, N'FP65i-#1-1', N'Y90114', N'172.16.32.105', 1, 1, 0, 0, 0, 2, 8, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (4, N'RP90i #1', N'DCC005', N'192.168.0.190', 1, 1, 0, 0, 0, 1, 3, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (5, N'RP90i #2', N'DCC006', N'172.16.32.108', 1, 1, 0, 0, 0, 1, 3, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (6, N'FP65i-#2-1', N'DCC004', N'127.0.0.4', 1, 1, 0, 0, 0, 2, 8, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (7, N'RP90i-#3-1', N'DCC007', N'192.168.0.153', 1, 1, 0, 0, 0, 1, 8, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (8, N'MX', N'MX-1', N'D:\sip\mx\out_', 0, 0, 0, 0, 0, 9, 8, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (10, N'150i', N'150-1', N'COM1', 0, 0, 0, 0, 0, 8, 8, 0);
INSERT INTO PRINTER (uniqueID, FULL_NAME, SERIAL_NUMBER, IP, SMARTCARD, MAGSTRIPE, INDENT, EMBOSS, OVERLAY, HW_MODEL, SITE, STATUS) VALUES (11, N'Recycle', N'Recycle', N'Recycle', 0, 0, 0, 0, 0, 10, 8, 0)


CREATE VIEW StatusPrinter AS
SELECT     CARD.PRINTER,CARD.PRODUCT,PRINTER.FULL_NAME, PRINTER.SERIAL_NUMBER, PRINTER.HW_MODEL, PRINTER.SITE, PRINTER.STATUS AS PRINTER_STATUS,
			CARD.STATUS AS CARD_STATUS, CARD.PRINT_DATE, PRODUCT.DESCRIPTION, PRODUCT.APS  			
FROM         PRINTER INNER JOIN CARD ON PRINTER.UNIQUEID=CARD.PRINTER 
					 INNER JOIN PRODUCT ON CARD.PRODUCT=PRODUCT.UNIQUEID
ORDER BY CARD.PRINTER, CARD.PRODUCT, CARD_STATUS;

CREATE VIEW PrinterList AS
SELECT     PRINTER.uniqueID, PRINTER.FULL_NAME, PRINTER.SERIAL_NUMBER, PRINTER.IP, PRINTER.SMARTCARD, PRINTER.MAGSTRIPE, 
                      PRINTER.INDENT, PRINTER.EMBOSS, PRINTER.OVERLAY, PRINTER.HW_MODEL, PRINTER.SITE, PRINTER.STATUS, 
                      PRINTER.LAST_MODIFIED, HW_MODEL.PICTURE, HW_MODEL.DRIVER
FROM         PRINTER INNER JOIN HW_MODEL ON PRINTER.HW_MODEL = HW_MODEL.uniqueID;    

DROP TABLE IF EXISTS SITE;
CREATE TABLE SITE(
	uniqueID int IDENTITY(1,1) NOT NULL,
	FULL_NAME varchar(50) NOT NULL,
	ADDRESS_1 varchar(50) NULL,
	ZIP_CODE int NULL,
	CITY varchar(50) NULL,
	STATE varchar(20) NULL,
	CONTACT varchar(50) NULL,
	EMAIL varchar(50) NULL,
	TEL varchar(50) NULL,
	LAST_MODIFIED timestamp NULL,
	PRIMARY KEY  (	uniqueID)
);
alter table SITE add column DESCRIPTION varchar(50) NULL ;
alter table SITE add column ADDRESS_2 varchar(256) NULL;
alter table SITE add column PROVINCE varchar(50) NULL;

alter table SITE add column TYPE int NULL;
alter table SITE add column LEVEL int NULL;
alter table SITE add column PARENT_1 int NULL;
alter table SITE add column PARENT_2 int NULL;
alter table SITE add column PARENT_3 int NULL;
alter table SITE add column PARENT_4 int NULL;
alter table SITE add column PARENT_5 int NULL;
alter table SITE add column STR1 varchar(50) NULL;
alter table SITE add column STR2 varchar(50) NULL;

alter table SITE alter column uniqueID INT auto_increment;
alter table SITE alter column ADDRESS_1 varchar(256) NULL;

alter table SITE drop column ZIP_CODE;
alter table SITE drop column CONTACT;

alter table SITE DROP UNIQUE (DESCRIPTION) ;
alter table SITE ADD UNIQUE (FULL_NAME) ;
INSERT INTO SITE (uniqueID, FULL_NAME, ADDRESS_1, ZIP_CODE, CITY, STATE, CONTACT, EMAIL, TEL) VALUES (1, N'System', NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO SITE (uniqueID, FULL_NAME, ADDRESS_1, ZIP_CODE, CITY, STATE, CONTACT, EMAIL, TEL) VALUES (2, N'Downtown', N'1234 Main St', 12345, N'Anytown', N'MN', N'Sales', N'sales@datacard.com', N'800-111-2222');
INSERT INTO SITE (uniqueID, FULL_NAME, ADDRESS_1, ZIP_CODE, CITY, STATE, CONTACT, EMAIL, TEL) VALUES (3, N'Uptown', N'9876 Main St', 12346, N'Anytown', N'MN', N'Sales', N'sales@datacard.com', N'800-111-2222');

update  SITE  set full_name='Guangdong Head Office',address_1='Guangdong Province',city=' ',state='China',email='guangdong@cmb.com',tel='400-820-5555',last_modified=CURRENT_TIMESTAMP,description='province level',address_2='',province='Guangdong',type=0,level=0,parent_1=0,parent_2=0,parent_3=0,parent_4=0,parent_5=0  where uniqueID=1;
update  SITE  set full_name= 'Beijing Head Office',address_1='The world trade center 1F,No.36,dongcheng district ',city='Beijing ',state='China',email='beisanhuan@cmb.com',tel='010-595-75059',last_modified=CURRENT_TIMESTAMP,description='city level',address_2='',province='',type=0,level=0,parent_1=0,parent_2=0,parent_3=0,parent_4=0,parent_5=0  where uniqueID=2;
update  SITE  set full_name= 'Fujian Head Office',address_1='Fujian Province',city= '',state='China',email='fujian@cmb.com',tel='0591-83213465',last_modified=CURRENT_TIMESTAMP,description='province  level',address_2='',province='',type=0,level=0,parent_1=0,parent_2=0,parent_3=0,parent_4=0,parent_5=0  where uniqueID=3;

insert into site (full_name) values ('whie');
update  SITE  set full_name= 'White horse Branch',address_1='No.333,The gate building,at the south of White Horse Road ',city= 'Fuzhou',state='China',email='whitehorse@cmb.com',tel='0591-83213465',last_modified=CURRENT_TIMESTAMP,description='White horse Branch',address_2='',province='Fujian',type=0,level=1,parent_1=3,parent_2=0,parent_3=0,parent_4=0,parent_5=0  where uniqueID=4;
INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('Changle Branch', 'Changle Branch', '1F,The telecom building,No.152,Changle Hall,fuzhou city,Fujian Province,China', '','Fuzhou', 'Fujian', 'China', 0,2,3,0,0,0,0,'changle@cmd.com','0591-27528965',CURRENT_TIMESTAMP);

INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('Central City Branch', 'Central City Branch', 'No RL1094,The business center,futian Distinct,Shenzhen City,Guangdong Province,China', '','Shenzhen', 'Guangdong', 'China', 0,2,1,0,0,0,0,'centralcity@cmd.com','0755-82249490',CURRENT_TIMESTAMP);

INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('Civic Center Branch', 'Civic Center Branch', 'No.1280,The Huangpu villas building,fuzhong 3rd road,futian district center,futian Distinct,Shenzhen City', '','Shenzhen', 'Guangdong', 'China', 0,3,1,8,0,0,0,'civiccenter@cmd.com','0755-82987505',CURRENT_TIMESTAMP);
INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('Che Kung TEMPLATE Branch', 'Che Kung TEMPLATE Branch', '1F,Block A,The Tienhsiang building,futian district center,Shenzhen City', '','Shenzhen', 'Guangdong', 'China', 0,3,1,5,6,0,0,'chekung@cmb.com','0755-83401751',CURRENT_TIMESTAMP);
INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('The central business Branch', 'The central business Branch', 'No.88,1F,The central building,futian district center,Shenzhen City', '','Shenzhen', 'Guangdong', 'China', 0,1,1,0,0,0,0,'cbd@cmb.com','0755-82032908',CURRENT_TIMESTAMP);
INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('Fujian Provincial Branch', 'Fujian Provincial Branch', 'No.60,1F,The food building,the Drum screen road', '','Fuzhou', 'Fujian', 'China', 0,1,3,0,0,0,0,'fujianprovincial@cmb.com','0591-87617210',CURRENT_TIMESTAMP);
INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('Shenzhen city Branch', 'Shenzhen city Branch', '1F,The news building,the Shennan Road', '','Shenzhen', 'Guangdong', 'China', 0,2,3,0,0,0,0,'fujianprovincial@cmb.com','0591-87617210',CURRENT_TIMESTAMP);
INSERT INTO SITE (FULL_NAME, DESCRIPTION,ADDRESS_1,ADDRESS_2,CITY,PROVINCE,STATE,TYPE,LEVEL,PARENT_1 ,PARENT_2,PARENT_3,PARENT_4,PARENT_5,EMAIL, TEL,LAST_MODIFIED) VALUES 
('Futian Branch ATM', 'Futian Branch ATM', '1F,The Nanguang building,No.5 on the Huafu Road', '','Shenzhen', 'Guangdong', 'China', 0,4,1,10,8,5,0,'fuhuaatm@cmb.com','0755-83689567',CURRENT_TIMESTAMP);
CREATE VIEW UserLogin AS 
SELECT USER.*, SITE.FULL_NAME AS SiteName FROM USER INNER JOIN SITE ON USER.SITE = SITE.uniqueID;
                                           
CREATE VIEW CardsProduced AS
SELECT CARD.CARDHOLDER, CARD.PRINT_DATE, CARD.STATUS, CARD.GRAPHIC, PRINTER.FULL_NAME AS PrinterName, SITE.FULL_NAME AS SiteName, PRODUCT.DESCRIPTION, CARD.PIN, CARD.DUPLICATE_PIN, CARD.DUPLICATE_PAN
FROM PRODUCT INNER JOIN CARD ON PRODUCT.uniqueID = CARD.PRODUCT LEFT OUTER JOIN SITE INNER JOIN PRINTER ON SITE.uniqueID = PRINTER.SITE ON CARD.PRINTER = PRINTER.uniqueID;
                      
CREATE VIEW PendingCards AS
SELECT CARDHOLDER.FIRSTNAME,CARDHOLDER.LASTNAME,CARDHOLDER.PAN, CARDHOLDER.EXPIRY_DATE,CARDHOLDER.CVV2,CARDHOLDER.SITE, CARDHOLDER.PRODUCT, PRODUCT.DESCRIPTION, PRODUCT.GRAPHICS, PRODUCT.APS, PRODUCT.MAGSTRIPE, PRODUCT.SMARTCARD, CARDHOLDER.UNIQUEID AS CUSTID, PRODUCT.TEMPLATE
FROM PRODUCT INNER JOIN CARDHOLDER ON PRODUCT.UNIQUEID = CARDHOLDER.PRODUCT;
    
//for smk profiles	
DROP TABLE IF EXISTS SMKPROFILES;																						
CREATE TABLE SMKPROFILES(
    uniqueID INT auto_increment,
	JOB_OID VARCHAR(64) UNIQUE,
	PRODUCT_OID VARCHAR(64) UNIQUE,
	APPNAME VARCHAR(64) ,
	BANK_NAME VARCHAR(64) ,
	BIN VARCHAR(64),
	EMV_BRAND VARCHAR(64),
	EMV_TYPE VARCHAR(64),
	EMV_PROFILE VARCHAR(64),
	CARD_OBJECT VARCHAR(64),
	NAME VARCHAR(64) ,
	STATUS VARCHAR(10),
	DESCRIPTION VARCHAR(1024),
	PATH VARCHAR(1024),
	VERSION VARCHAR(50) ,
	CREATE_TIME TIMESTAMP,
	LASTMODIFIED_TIME TIMESTAMP,
	PRIMARY KEY (ID)
);
INSERT INTO SMKPROFILES (JOB_OID, PRODUCT_OID,CREATE_TIME) VALUES ('2B0601040181900D97380785C6780101', '2B0601040181900D97380585C6780101',CURRENT_TIMESTAMP);	
DROP TABLE IF EXISTS PRODUCT_CONFIG;
CREATE TABLE PRODUCT_CONFIG(
    uniqueID INT auto_increment,	
	PRINTER INT NULL,
	PRODUCT INT NULL,
	HOPPER_NO INT NULL,
	STATUS INT NULL,
	HISTORY  VARCHAR(2000) NULL,
	CREATETIME timestamp,
	LAST_MODIFIED timestamp,
	PRIMARY KEY  (uniqueID)
);
INSERT INTO PRODUCT_CONFIG (PRINTER, PRODUCT,HOPPER_NO,STATUS,HISTORY,CREATETIME,LAST_MODIFIED) VALUES (1,2,3,0,'09-05 16:20' ,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PRODUCT_CONFIG (PRINTER, PRODUCT,HOPPER_NO,STATUS,HISTORY,CREATETIME,LAST_MODIFIED) VALUES (1,3,4,0,'09-05 16:20' ,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PRODUCT_CONFIG (PRINTER, PRODUCT,HOPPER_NO,STATUS,HISTORY,CREATETIME,LAST_MODIFIED) VALUES (1,4,1,0,'09-05 16:20' ,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PRODUCT_CONFIG (PRINTER, PRODUCT,HOPPER_NO,STATUS,HISTORY,CREATETIME,LAST_MODIFIED) VALUES (1,1,2,0,'09-05 16:20' ,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PRODUCT_CONFIG (PRINTER, PRODUCT,HOPPER_NO,STATUS,HISTORY,CREATETIME,LAST_MODIFIED) VALUES (1,5,3,0,'09-05 16:20' ,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
DROP TABLE IF EXISTS CARDFORMAT;
CREATE TABLE CARDFORMAT(
	uniqueID INT auto_increment,
	FULL_NAME varchar(50) NOT NULL,
	CONTENT varchar(2048) NULL,
	CREATETIME timestamp,
	LAST_MODIFIED timestamp,
	STR1 varchar(255) NULL,
	STR2 varchar(255) NULL,
	PRIMARY KEY  (uniqueID)
);		
INSERT INTO CARDFORMAT (FULL_NAME, CONTENT,CREATETIME) VALUES ('VISA Credit Classic','aaa',CURRENT_TIMESTAMP);		
INSERT INTO CARDFORMAT (FULL_NAME, CONTENT,CREATETIME) VALUES ('VISA Credit Platium','bbb',CURRENT_TIMESTAMP);
INSERT INTO CARDFORMAT (FULL_NAME, CONTENT,CREATETIME) VALUES ('MASTER Debit','ccc',CURRENT_TIMESTAMP);
INSERT INTO CARDFORMAT (FULL_NAME, CONTENT,CREATETIME) VALUES ('VISA Credit Standard','ddd',CURRENT_TIMESTAMP);
INSERT INTO CARDFORMAT (FULL_NAME, CONTENT,CREATETIME) VALUES ('PBOC 3.0 ','eee',CURRENT_TIMESTAMP);		
